#include <iostream>      // For standard input and output operations
#include <fstream>       // For file handling (read/write)
#include <cstring>       // For using string functions with character arrays
using namespace std;

// Structure to store employee data
struct Employee {
    int empID;                // Employee ID
    char name[50];            // Employee name
    char designation[50];     // Job title/designation
    float salary;             // Salary of employee
};

// Class to handle employee file operations
class EmployeeFile {
public:
    void addEmployee();       // Adds new employee data to file
    void deleteEmployee();    // Deletes employee data from file
    void displayEmployee();   // Displays details of a specific employee
    void menu();              // Displays menu and handles user input

private:
    fstream file;             // File stream for reading/writing data
    fstream indexFile;        // (Unused in this code) Can be used for indexing
    const char* filename = "employee_data.dat";       // Data file name
    const char* indexFilename = "employee_index.dat"; // Index file name (not used)
};

// Menu-driven interface for the user
void EmployeeFile::menu() {
    int choice;
    while (true) {
        cout << "\n===== Employee Management System =====\n";
        cout << "1. Add Employee\n";
        cout << "2. Delete Employee\n";
        cout << "3. Display Employee\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addEmployee();       // Call to add an employee
                break;
            case 2:
                deleteEmployee();    // Call to delete an employee
                break;
            case 3:
                displayEmployee();   // Call to display an employee's info
                break;
            case 4:
                cout << "Exiting...\n";  // Exit from the program
                return;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    }
}

// Adds a new employee record to the file
void EmployeeFile::addEmployee() {
    file.open(filename, ios::in | ios::out | ios::binary | ios::app); // Open file in append binary mode
    if (!file) {
        cout << "Error opening file.\n";
        return;
    }

    Employee emp;
    cout << "Enter Employee ID: ";
    cin >> emp.empID;
    cout << "Enter Name: ";
    cin.ignore();                       // Clear newline character from buffer
    cin.getline(emp.name, 50);         // Read full name including spaces
    cout << "Enter Designation: ";
    cin.getline(emp.designation, 50);  // Read designation including spaces
    cout << "Enter Salary: ";
    cin >> emp.salary;

    file.write((char*)&emp, sizeof(emp)); // Write employee record to file
    cout << "Employee added successfully.\n";
    file.close();                         // Close the file
}

// Deletes an employee record from the file
void EmployeeFile::deleteEmployee() {
    int id;
    cout << "Enter Employee ID to delete: ";
    cin >> id;

    file.open(filename, ios::in | ios::out | ios::binary); // Open original file
    if (!file) {
        cout << "Error opening file.\n";
        return;
    }

    fstream tempFile("temp.dat", ios::out | ios::binary); // Temp file to hold all records
    Employee emp;
    bool found = false;

    while (file.read((char*)&emp, sizeof(emp))) {
        if (emp.empID == id) {
            found = true; // Mark as found, but do not write it to temp file
        } else {
            tempFile.write((char*)&emp, sizeof(emp)); // Write all others to temp
        }
    }

    file.close();         // Close original file
    tempFile.close();     // Close temp file

    if (found) {
        remove(filename);                // Delete original file
        rename("temp.dat", filename);    // Rename temp as original
        cout << "Employee deleted successfully.\n";
    } else {
        cout << "Employee not found!\n";
    }
}

// Displays employee details based on ID
void EmployeeFile::displayEmployee() {
    int id;
    cout << "Enter Employee ID to display: ";
    cin >> id;

    file.open(filename, ios::in | ios::binary); // Open file in read mode
    if (!file) {
        cout << "Error opening file.\n";
        return;
    }

    Employee emp;
    bool found = false;

    while (file.read((char*)&emp, sizeof(emp))) {
        if (emp.empID == id) {
            cout << "\n--- Employee Details ---\n";
            cout << "ID: " << emp.empID << "\n";
            cout << "Name: " << emp.name << "\n";
            cout << "Designation: " << emp.designation << "\n";
            cout << "Salary: " << emp.salary << "\n";
            found = true;
            break; // Exit loop once found
        }
    }

    if (!found) {
        cout << "Employee not found!\n";
    }
    file.close(); // Close the file
}

// Main function starts the program
int main() {
    EmployeeFile empFile;
    empFile.menu(); // Start the menu interface
    return 0;
}

///////////

cd path/to/your/file
g++ filename.cpp -o outputname
./outputname
g++ hello.cpp -o hello
./hello
sudo apt update
sudo apt install g++
/////////

Includes and Namespaces:

#include <iostream>: Used for input/output operations.

#include <fstream>: Used for file handling (reading and writing to files).

#include <cstring>: Allows manipulation of C-style strings.

using namespace std;: Makes the code simpler by using standard namespace functions.

Employee Structure:

Employee struct contains:

empID: Employee ID (integer).

name: Employee name (character array of 50).

designation: Employee job designation (character array of 50).

salary: Employee salary (float).

EmployeeFile Class:

Manages the employee records file operations.

Public Methods:

addEmployee(): Adds an employee record.

deleteEmployee(): Deletes an employee record by ID.

displayEmployee(): Displays the details of an employee by ID.

menu(): Displays a menu for the user to choose options.

Private Members:

fstream file: File stream to access the employee data file.

fstream indexFile: (Unused) Could be used for indexing purposes.

const char* filename: Name of the employee data file (employee_data.dat).

const char* indexFilename: Name of the employee index file (employee_index.dat).

Menu Method:

Continuously shows a menu with four options (Add, Delete, Display, Exit).

Uses a switch statement to call the appropriate function based on user input.

addEmployee Method:

Opens the employee_data.dat file in append mode to add a new record.

Collects employee details (empID, name, designation, salary) from the user.

Writes the employee data to the file in binary format using file.write.

Closes the file and confirms successful addition.

deleteEmployee Method:

Asks the user for the employee ID to delete.

Opens the file and creates a temporary file to store all records except the one to be deleted.

Reads the employee records from the original file and writes those that do not match the given ID to the temporary file.

Replaces the original file with the temporary file (deleting the employee).

Displays success or failure message based on whether the employee was found.

displayEmployee Method:

Asks for the employee ID to display.

Reads the employee data from the file and checks if the ID matches the user input.

If found, displays the employee's details (empID, name, designation, salary).

If not found, displays an error message.

Main Method:

Creates an EmployeeFile object.

Calls the menu() method to start the program and show the menu.

Summary:
The program manages an employee database using a binary file (employee_data.dat).

It allows the user to add, delete, and display employee records based on their ID.

The addEmployee method appends data, the deleteEmployee method removes a record, and the displayEmployee method shows the record.

The program loops continuously in the menu method until the user chooses to exit.
