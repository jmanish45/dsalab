#include <iostream>
#include <string> // Required for std::string
using namespace std;

class node {
public:
    node *leftc;
    string word;
    string meaning;
    node *rightc;

    node() {
        leftc = rightc = nullptr;
        word = "";
        meaning = "";
    }
};

class BST {
private:
    int comparisons;

    void insert(node *&current, node *temp) {
        if (temp->word < current->word) {
            if (current->leftc == nullptr)
                current->leftc = temp;
            else
                insert(current->leftc, temp);
        } else {
            if (current->rightc == nullptr)
                current->rightc = temp;
            else
                insert(current->rightc, temp);
        }
    }

public:
    node *root;

    BST() {
        root = nullptr;
        comparisons = 0;
    }

    void create() {
        char ch;
        do {
            node *temp = new node;
            cout << "\nEnter the keyword: ";
            cin >> temp->word;
            cout << "Enter the meaning: ";
            cin >> temp->meaning;

            if (root == nullptr)
                root = temp;
            else
                insert(root, temp);

            cout << "\nDo you want to continue (y/n): ";
            cin >> ch;
        } while (ch == 'y' || ch == 'Y');
    }

    void inorder(node *root) {
        if (root != nullptr) {
            inorder(root->leftc);
            cout << root->word << " : " << root->meaning << endl;
            inorder(root->rightc);
        }
    }

    void preorder(node *root) {
        if (root != nullptr) {
            cout << root->word << " : " << root->meaning << endl;
            preorder(root->leftc);
            preorder(root->rightc);
        }
    }

    void postorder(node *root) {
        if (root != nullptr) {
            postorder(root->leftc);
            postorder(root->rightc);
            cout << root->word << " : " << root->meaning << endl;
        }
    }

    void converse_inorder(node *root) {
        if (root != nullptr) {
            converse_inorder(root->rightc);
            cout << root->word << " : " << root->meaning << endl;
            converse_inorder(root->leftc);
        }
    }

    node* search(node* root, const string& key) {
        if (root == nullptr) {
            cout << "Word not found!" << endl;
            return nullptr;
        }

        comparisons++;

        if (key == root->word) {
            cout << "Word found: " << root->word << " -> " << root->meaning << endl;
            return root;
        } else if (key < root->word) {
            return search(root->leftc, key);
        } else {
            return search(root->rightc, key);
        }
    }

    void modify(node* root, const string& key) {
        node* res = search(root, key);
        if (res != nullptr) {
            cout << "Enter new meaning for the word: ";
            cin >> res->meaning;
            cout << "Meaning updated!" << endl;
        }
    }

    node* minValueNode(node* temp) {
    node* current = temp;
    while (current && current->leftc != NULL)
        current = current->leftc;
    return current;
}


    node* deleteRec(node* root, const string& key) {
        if (root == nullptr)
            return root;

        if (key < root->word)
            root->leftc = deleteRec(root->leftc, key);
        else if (key > root->word)
            root->rightc = deleteRec(root->rightc, key);
        else {
            if (root->leftc == nullptr) {
                node* temp = root->rightc;
                delete root;
                return temp;
            } else if (root->rightc == nullptr) {
                node* temp = root->leftc;
                delete root;
                return temp;
            }

            node* temp = minValueNode(root->rightc);
            root->word = temp->word;
            root->meaning = temp->meaning;
            root->rightc = deleteRec(root->rightc, temp->word);
        }
        return root;
    }

    void delete_node(const string& key) {
        root = deleteRec(root, key);
        cout << "Word deleted if it existed!" << endl;
    }

    void comparison(const string& key) {
        comparisons = 0;
        search(root, key);
        cout << "Number of comparisons: " << comparisons << endl;
    }
};

int main() {
    BST B;
    int choice;
    string value;

    while (true) {
        cout << "\n----------------------------MENU----------------------------------" << endl;
        cout << "1. Create and insert word\n2. Display in ascending order\n3. Display in descending order\n";
        cout << "4. Postorder traversal\n5. Search a word\n6. Modify a word\n7. Delete a word\n";
        cout << "8. Count comparisons in search\n9. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                B.create();
                break;
            case 2:
                B.inorder(B.root);
                break;
            case 3:
                B.converse_inorder(B.root);
                break;
            case 4:
                B.postorder(B.root);
                break;
            case 5:
                cout << "Enter the word to search: ";
                cin >> value;
                B.search(B.root, value);
                break;
            case 6:
                cout << "Enter the word to modify: ";
                cin >> value;
                B.modify(B.root, value);
                break;
            case 7:
                cout << "Enter the word to delete: ";
                cin >> value;
                B.delete_node(value);
                break;
            case 8:
                cout << "Enter the word for comparison: ";
                cin >> value;
                B.comparison(value);
                break;
            case 9:
                cout << "Exiting....!" << endl;
                return 0;
            default:
                cout << "Invalid choice!" << endl;
        }
    }
}
